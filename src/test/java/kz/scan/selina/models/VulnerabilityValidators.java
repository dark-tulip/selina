package kz.scan.selina.models;

import com.codeborne.selenide.Selenide;
import com.codeborne.selenide.SelenideElement;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

import static com.codeborne.selenide.Condition.type;
import static com.codeborne.selenide.Selenide.$;
import static kz.scan.selina.models.FormTypes.*;

public class VulnerabilityValidators {

  public static boolean isAlertPresent() {
    WebDriverWait wait = new WebDriverWait(Selenide.webdriver().object(), Duration.ofSeconds(1));
    try {
      wait.until(ExpectedConditions.alertIsPresent());
      return true;
    } catch (TimeoutException eTO) {
      return false;
    }
  }

  public static boolean isTextInsertableInputForm(SelenideElement webElement) {
    return getAllInputTypes().stream().anyMatch(x -> webElement.has(type(x)));
  }

  public static boolean isClickableInputForm(SelenideElement webElement) {
    return getAllClickableInputTypes().stream().anyMatch(x -> webElement.has(type(x)));
  }

  public static boolean isButton(SelenideElement webElement) {
    return getButtonTypes().stream().anyMatch(x -> webElement.has(type(x)));
  }

  public static boolean isIframePresent() {
    if ($("iframe").exists()) {
      return true;
    }
    return false;
  }


  public static boolean isCodeSignatureExists() {
    if ($("iframe").exists()) {
      return true;
    }
    return false;
  }
}
